/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../environments";
import * as core from "../../../../../core";
import { MirrorworldApi } from "@fern-api/mirrorworld";
import urlJoin from "url-join";
import * as serializers from "../../../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    apiKey?: core.Supplier<string>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async mintNft(
    network: string,
    request: MirrorworldApi.marketplaces.MintWithCollectionReq
  ): Promise<MirrorworldApi.marketplaces.mint.mintNft.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/v1/${network}/solana//mint/nft`),
      method: "POST",
      headers: {
        "X-API-Key": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.marketplaces.mint.mintNft.Request.json({
        collectionMint: request.collectionMint,
        name: request.name,
        symbol: request.symbol,
        url: request.url,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.marketplaces.mint.mintNft.Response.parse(
          _response.body as serializers.marketplaces.mint.mintNft.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: MirrorworldApi.marketplaces.mint.mintNft.Error.badRequest(),
          };
      }
    }

    return {
      ok: false,
      error: MirrorworldApi.marketplaces.mint.mintNft.Error._unknown(_response.error),
    };
  }

  public async mintCollection(
    network: string,
    request: MirrorworldApi.marketplaces.MintCollectionReq
  ): Promise<MirrorworldApi.marketplaces.mint.mintCollection.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/v1/${network}/solana//mint/collection`
      ),
      method: "POST",
      headers: {
        "X-API-Key": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.marketplaces.mint.mintCollection.Request.json({
        name: request.name,
        symbol: request.symbol,
        url: request.url,
        confirmation: request.confirmation,
        sellerFeeBasisPoints: request.sellerFeeBasisPoints,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.marketplaces.mint.mintCollection.Response.parse(
          _response.body as serializers.marketplaces.mint.mintCollection.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: MirrorworldApi.marketplaces.mint.mintCollection.Error.badRequest(),
          };
      }
    }

    return {
      ok: false,
      error: MirrorworldApi.marketplaces.mint.mintCollection.Error._unknown(_response.error),
    };
  }
}
