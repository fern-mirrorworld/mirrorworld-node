/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import { MirrorworldApi } from "@fern-api/mirrorworld";
import * as core from "../../../../../core";

export const BindPaymentCodeResponseData: core.schemas.ObjectSchema<
  serializers.authentication.BindPaymentCodeResponseData.Raw,
  MirrorworldApi.authentication.BindPaymentCodeResponseData
> = core.schemas.object({
  id: core.schemas.number(),
  ethAddress: core.schemas.property("eth_address", core.schemas.string()),
  solAddress: core.schemas.property("sol_address", core.schemas.string()),
  email: core.schemas.string(),
  emailVerified: core.schemas.property("email_verified", core.schemas.boolean()),
  username: core.schemas.string(),
  wallet: core.schemas.lazyObject(async () => (await import("../../../..")).authentication.Wallet),
  createdAt: core.schemas.string(),
  updatedAt: core.schemas.string(),
});

export declare namespace BindPaymentCodeResponseData {
  interface Raw {
    id: number;
    eth_address: string;
    sol_address: string;
    email: string;
    email_verified: boolean;
    username: string;
    wallet: serializers.authentication.Wallet.Raw;
    createdAt: string;
    updatedAt: string;
  }
}
